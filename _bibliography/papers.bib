---
---

@article{leduc2019automatic,

  abbr      = {{ECMFA}},
  index     = 1,
  author    = {Leduc, Manuel and 
               Jouneaux, Gwendal and 
               Degueule, Thomas and 
               Le Guernic, Gurvan and 
               Barais, Olivier and 
               Combemale, Benoit},
  title     = {Automatic Generation of Truffle-based Interpreters for Domain-Specific Languages},
  journal   = {J. Object Technol. (Special Issue for ECMFA 2020 Proceedings)},
  volume    = {19},
  number    = {2},
  pages     = {1:1--21},
  year      = {2020},
  issn      = {1660-1769},
  month     = jul,
  editor    = {Richard Paige and Antonio Vallecillo},
  note      = {The 16th European Conference on Modelling Foundations and Applications (ECMFA 2020)},
  url       = {http://www.jot.fm/contents/issue_2020_02/article1.html},
  doi       = {10.5381/jot.2020.19.2.a1},
  abstract  = {{ Numerous language workbenches have been proposed over the past decade to ease the 
              definition of Domain-Specific Languages (DSLs).Language workbenches enable DSL designers 
              to specify DSLs using high-level metalanguages, and to automatically generate their 
              implementation (e.g., parsers, interpreters) and tool support (e.g., editors, debuggers). 
              However, little attention has been given to the performance of the resulting interpreters. 
              In many domains where performance is key (e.g., scientific and high-performance computing), 
              this forces DSL designers to handcraft ad-hoc optimizations in interpreter implementations, 
              or lose compatibility with tool support. In this paper, we propose to systematically exploit 
              domain-specific information of DSL specifications to derive optimized Truffle-based language 
              interpreters executed over the GraalVM. Those optimizations are provided at no extra cost for 
              the DSL designer. They are of course not as efficient as handcrafted optimizations, but do not 
              require extra time or knowledge from the DSL designer (which industrial DSL designers often lack). 
              We implement our approach on top of the Eclipse Modeling Framework (EMF) by complementing its 
              existing compilation chain with Truffle-specific information, which drives GraalVM to benefit 
              from optimized just-in-time compilation. A key benefit of our approach is that it leverages existing
              DSL specifications and does not require additional information from DSL designers who remain oblivious 
              of Truffle’s low-level intricacies and JIT optimizations in general while staying compatible with tool 
              support. We evaluate our approach using a representative set of four DSLs and eight conforming programs. 
              Compared to the standard interpreters generated by EMF running on GraalVM, we observe an average speed-up 
              of x1.14, ranging from x1.07 to x1.26. Although the benefits vary slightly from one DSL or program to another, 
              we conclude that our approach yields substantial performance gains while remaining non-intrusive of EMF abstractions.}}
}

@inproceedings{jouneaux2021towards,
  abbr={{Onward!}},
  index = 1,
  month = Oct,
  author = {Jouneaux, Gwendal and Barais, Olivier and Combemale, Benoit and Mussbacher, Gunter},
  title = {Towards Self-Adaptable Languages},
  year = {2021},
  isbn = {9781450391108},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://hal.inria.fr/hal-03318816v1/document},
  doi = {10.1145/3486607.3486753},
  booktitle = {Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  pages = {97–113},
  numpages = {17},
  keywords = {self-adaptation, software language, L-MODA framework, trade-off analysis, feedback loop},
  location = {Chicago, IL, USA},
  series = {Onward! 2021},
  abstract = {Over recent years, self-adaptation has become a concern for many software systems
  that have to operate in complex and changing environments. At the core of self-adaptation,
  there is a feedback loop and associated trade-off reasoning to decide on the best
  course of action. However, existing software languages do not abstract the development
  and execution of such feedback loops for self-adaptable systems. Developers have to
  fall back to ad-hoc solutions to implement self-adaptable systems, often with wide-ranging
  design implications (e.g., explicit MAPE-K loop). Furthermore, existing software languages
  do not capitalize on monitored usage data of a language and its modeling environment.
  This hinders the continuous and automatic evolution of a software language based on
  feedback loops from the modeling environment and runtime software system. To address
  the aforementioned issues, this paper introduces the concept of Self-Adaptable Language
  (SAL) to abstract the feedback loops at both system and language levels. We propose
  L-MODA (Language, Models, and Data) as a conceptual reference framework that characterizes
  the possible feedback loops abstracted into a SAL. To demonstrate SALs, we present
  emerging results on the abstraction of the system feedback loop into the language
  semantics. We report on the concept of Self-Adaptable Virtual Machines as an example
  of semantic adaptation in a language interpreter and present a roadmap for SALs.}
}


@inproceedings{jouneaux2021SEALS, 
  ABBR = {SLE},
  INDEX = 2,
  TITLE = {{SEALS: A Framework for Building Self-Adaptive Virtual Machines}}, 
  AUTHOR = {Jouneaux, Gwendal and Barais, Olivier and Combemale, Benoit and Mussbacher, Gunter}, 
  URL = {https://hal.inria.fr/hal-03355253/document}, 
  BOOKTITLE = {{Proceedings of the 14th ACM SIGPLAN International Conference on Software Language Engineering (SLE '21)}},
  ADDRESS = {Chicago, United States}, 
  YEAR = {2021}, 
  MONTH = Oct, 
  DOI = {10.1145/3486608.3486912},
  ISBN = {9781450391115},
  PUBLISHER = {Association for Computing Machinery},
  PAGES = {150–163},
  NUMPAGES = {14},
  KEYWORDS = {software language, framework, self-adaptation},
  SERIES = {SLE 2021},
  ABSTRACT = {Over recent years, self-adaptation has become a major concern for software systems 
  that evolve in changing environments. While expert developers may choose a manual implementation 
  when self-adaptation is the primary concern, self-adaptation should be abstracted for non-expert 
  developers or when it is a secondary concern. We present SEALS, a framework for building self-adaptive 
  virtual machines for domain specific languages. This framework provides first-class entities for 
  the language engineer to promote domain-specific feedback loops in the definition of the DSL 
  operational semantics. In particular, the framework supports the definition of (i) the abstract 
  syntax and the semantics of the language as well as the correctness envelope defining the acceptable 
  semantics for a domain concept, (ii) the feedback loop and associated trade-off reasoning, and 
  (iii) the adaptations and the predictive model of their impact on the trade-off. We use this 
  framework to build three languages with self-adaptive virtual machines and discuss the relevance 
  of the abstractions, effectiveness of correctness envelopes, and compare their code size and 
  performance results to their manually implemented counterparts. We show that the framework provides 
  suitable abstractions for the implementation of self-adaptive operational semantics while introducing 
  little performance overhead compared to a manual implementation.}
}

@inproceedings{jouneaux2023Adaptive,
  abbr = {SLE},
  author = {Jouneaux, Gwendal and Fr\"{o}lich, Damian and Barais, Olivier and Combemale, Benoit and Le Guernic, Gurvan and Mussbacher, Gunter and {van Binsbergen}, L. Thomas},
  title = {Adaptive Structural Operational Semantics},
  year = {2023},
  isbn = {9798400703966},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://inria.hal.science/hal-04252577/document}, 
  doi = {10.1145/3623476.3623517},
  abstract = {Software systems evolve more and more in complex and changing environments, often requiring runtime adaptation to best deliver their services. When self-adaptation is the main concern of the system, a manual implementation of the underlying feedback loop and trade-off analysis may be desirable. However, the required expertise and substantial development effort make such implementations prohibitively difficult when it is only a secondary concern for the given domain. In this paper, we present ASOS, a metalanguage abstracting the runtime adaptation concern of a given domain in the behavioral semantics of a domain-specific language (DSL), freeing the language user from implementing it from scratch for each system in the domain. We demonstrate our approach on RobLANG, a procedural DSL for robotics, where we abstract a recurrent energy-saving behavior depending on the context. We provide formal semantics for ASOS and pave the way for checking properties such as determinism, completeness, and termination of the resulting self-adaptable language. We provide first results on the performance of our approach compared to a manual implementation of this self-adaptable behavior. We demonstrate, for RobLANG, that our approach provides suitable abstractions for specifying sound adaptive operational semantics while being more efficient.},
  booktitle = {Proceedings of the 16th ACM SIGPLAN International Conference on Software Language Engineering},
  pages = {29–42},
  numpages = {14},
  keywords = {DSL, Self-Adaptation, Operational Semantics},
  location = {Cascais, Portugal},
  series = {SLE 2023}
}

@article {mussbacher2024polyglot,
  abbr = {IEEE Software},
  author = {Mussbacher, Gunter and Combemale, Benoit and Kienzle, Jörg and Burgueño, Lola and Garcia-Dominguez, Antonio and Jézéquel, Jean-Marc and Jouneaux, Gwendal and Khelladi, Djamel-Eddine and Mosser, Sébastien and Pulgar, Corinne and Sahraoui, Houari and Schiedermeier, Maximilian and {van der Storm}, Tijs},
  journal = {IEEE Software},
  title = {Polyglot Software Development: Wait, What?},
  year = {2024},
  volume = {},
  number = {},
  issn = {1937-4194},
  pages = {1-8},
  abstract = {The notion of polyglot software development refers to the fact that most software projects nowadays rely on multiple languages to deal with widely different concerns, from core business concerns to user interface, security, and deployment concerns among many others. Many different wordings around this notion have been proposed in the literature, with little understanding of their differences. In this article, we propose a concise and unambiguous definition of polyglot software development including a conceptual model and its illustration on a well-known, open-source project. We further characterize the techniques used for the specification and operationalization of polyglot software development with a feature model, concentrating on polyglot programming. We conclude the article outlining the many challenges and perspectives raised by polyglot software development.},
  keywords = {task analysis, software, stakeholders, codes, programming, unified modeling language, programming profession},
  doi = {10.1109/MS.2023.3347875},
  url = {https://inria.hal.science/hal-04383286/document},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
  month = {jan}
}

@inproceedings{ait2025towards,
  abbr         = {ASE NIER},
  author       = {Adem Ait and Gwendal Jouneaux and Javier Luis C\'anovas Izquierdo and Jordi Cabot},
  title        = {{Towards Automated Governance: A DSL for Human-Agent Collaboration in Software Projects}},
  booktitle    = {Proceedings of the 40th {IEEE/ACM} International Conference on Automated Software Engineering, {ASE} 2025, Seoul, South Korea, November 16 - 20, 2025},
  abstract     = {The stakeholders involved in software development are becoming increasingly diverse, with both human contributors from varied backgrounds and AI-powered agents collaborating together in the process. This situation presents unique governance challenges, particularly in Open-Source Software (OSS) projects, where explicit policies are often lacking or unclear. This paper presents the vision and foundational concepts for a novel Domain-Specific Language (DSL) designed to define and enforce rich governance policies in systems involving diverse stakeholders, including agents. This DSL offers a pathway towards more robust, adaptable, and ultimately automated governance, paving the way for more effective collaboration in software projects, especially OSS ones.},
  url          = {https://arxiv.org/pdf/2510.14465},
  publisher    = {{ACM}},
  year         = {2025}
}

@inproceedings{jouneaux2025towards,
  abbr         = {Green-Aware AI}
  author       = {Gwendal Jouneaux and Jordi Cabot},
  title        = {{Towards Sustainability Model Cards}},
  booktitle    = {Proceedings of the 2nd AIxIA Workshop on Green-Aware Artificial Intelligence co-located with the 24rd International Conference of the Italian Association for Artificial Intelligence (AIxIA 2025), Bologna, Italy, October 26, 2025},
  abstract     = {The growth of machine learning (ML) models and associated datasets triggers a consequent dramatic increase in energy costs for the use and training of these models. In the current context of environmental awareness and global sustainability concerns involving ICT, Green AI is becoming an important research topic. Initiatives like the AI Energy Score Ratings are a good example. Nevertheless, these benchmarking attempts are still to be integrated with existing work on Quality Models and Service-Level Agreements common in other, more mature, ICT subfields. This limits the (automatic) analysis of this model energy descriptions and their use in (semi)automatic model comparison, selection, and certification processes. We aim to leverage the concept of quality models and merge it with existing ML model reporting initiatives and Green/Frugal AI proposals to formalize a Sustainable Quality Model for AI/ML models. As a first step, we propose a new Domain-Specific Language to precisely define the sustainability aspects of an ML model (including the energy costs for its different tasks). This information can then be exported as an extended version of the well-known Model Cards initiative while, at the same time, being formal enough to be input of any other model description automatic process.},
  url          = {https://arxiv.org/pdf/2507.19559},
  series       = {{CEUR} Workshop Proceedings},
  publisher    = {CEUR-WS.org},
  year         = {2025}
}
